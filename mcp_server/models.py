# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:16:23+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AddOwnerParameters(BaseModel):
    url: str = Field(
        ...,
        description='A owner object URL, such as "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd", where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the owner (user, application, servicePrincipal, group) to be added.',
    )


class AppRole(BaseModel):
    allowedMemberTypes: Optional[List[str]] = Field(
        None,
        description="Specifies whether this app role definition can be assigned to users and groups by setting to 'User', or to other applications (that are accessing this application in daemon service scenarios) by setting to 'Application', or to both. ",
    )
    description: Optional[str] = Field(
        None,
        description='Permission help text that appears in the admin app assignment and consent experiences.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name for the permission that appears in the admin consent and app assignment experiences.',
    )
    id: Optional[str] = Field(
        None, description='Unique role identifier inside the appRoles collection.'
    )
    isEnabled: Optional[bool] = Field(
        None,
        description='When creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false. At that point, in a subsequent call, this role may be removed.',
    )
    value: Optional[str] = Field(
        None,
        description='Specifies the value of the roles claim that the application should expect in the authentication and access tokens.',
    )


class CheckGroupMembershipParameters(BaseModel):
    groupId: str = Field(..., description='The object ID of the group to check.')
    memberId: str = Field(
        ...,
        description='The object ID of the contact, group, user, or service principal to check for membership in the specified group.',
    )


class CheckGroupMembershipResult(BaseModel):
    value: Optional[bool] = Field(
        None,
        description='True if the specified user, group, contact, or service principal has either direct or transitive membership in the specified group; otherwise, false.',
    )


class DirectoryObject(BaseModel):
    deletionTimestamp: Optional[datetime] = Field(
        None, description='The time at which the directory object was deleted.'
    )
    objectId: Optional[str] = Field(None, description='The object ID.')
    objectType: str = Field(..., description='The object type.')


class DirectoryObjectListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='The URL to get the next set of results.',
    )
    value: Optional[List[DirectoryObject]] = Field(
        None, description='A collection of DirectoryObject.'
    )


class Domain(BaseModel):
    authenticationType: Optional[str] = Field(
        None, description='the type of the authentication into the domain.'
    )
    isDefault: Optional[bool] = Field(
        None, description='if this is the default domain in the tenant.'
    )
    isVerified: Optional[bool] = Field(
        None, description="if this domain's ownership is verified."
    )
    name: str = Field(..., description='the domain name.')


class DomainListResult(BaseModel):
    value: Optional[List[Domain]] = Field(None, description='the list of domains.')


class ErrorMessage(BaseModel):
    value: Optional[str] = Field(None, description='Error message value.')


class GetObjectsParameters(BaseModel):
    includeDirectoryObjectReferences: Optional[bool] = Field(
        None, description='If true, also searches for object IDs in the partner tenant.'
    )
    objectIds: Optional[List[str]] = Field(
        None, description='The requested object IDs.'
    )
    types: Optional[List[str]] = Field(None, description='The requested object types.')


class GroupAddMemberParameters(BaseModel):
    url: str = Field(
        ...,
        description='A member object URL, such as "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd", where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member (user, application, servicePrincipal, group) to be added.',
    )


class MailEnabled(Enum):
    boolean_False = False


class SecurityEnabled(Enum):
    boolean_True = True


class GroupCreateParameters(BaseModel):
    displayName: str = Field(..., description='Group display name')
    mailEnabled: MailEnabled = Field(
        ...,
        description='Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.',
    )
    mailNickname: str = Field(..., description='Mail nickname')
    securityEnabled: SecurityEnabled = Field(
        ...,
        description='Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.',
    )


class GroupGetMemberGroupsParameters(BaseModel):
    securityEnabledOnly: bool = Field(
        ...,
        description='If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.',
    )


class GroupGetMemberGroupsResult(BaseModel):
    value: Optional[List[str]] = Field(
        None, description='A collection of group IDs of which the group is a member.'
    )


class GroupMembershipClaims(Enum):
    None_ = 'None'
    SecurityGroup = 'SecurityGroup'
    All = 'All'


class InformationalUrl(BaseModel):
    marketing: Optional[str] = Field(None, description='The marketing URI')
    privacy: Optional[str] = Field(None, description='The privacy policy URI')
    support: Optional[str] = Field(None, description='The support URI')
    termsOfService: Optional[str] = Field(None, description='The terms of service URI')


class KeyCredential(BaseModel):
    customKeyIdentifier: Optional[str] = Field(
        None, description='Custom Key Identifier'
    )
    endDate: Optional[datetime] = Field(None, description='End date.')
    keyId: Optional[str] = Field(None, description='Key ID.')
    startDate: Optional[datetime] = Field(None, description='Start date.')
    type: Optional[str] = Field(
        None,
        description="Type. Acceptable values are 'AsymmetricX509Cert' and 'Symmetric'.",
    )
    usage: Optional[str] = Field(
        None, description="Usage. Acceptable values are 'Verify' and 'Sign'."
    )
    value: Optional[str] = Field(None, description='Key value.')


class KeyCredentialListResult(BaseModel):
    value: Optional[List[KeyCredential]] = Field(
        None, description='A collection of KeyCredentials.'
    )


class KeyCredentialsUpdateParameters(BaseModel):
    value: List[KeyCredential] = Field(
        ..., description='A collection of KeyCredentials.'
    )


class OAuth2Permission(BaseModel):
    adminConsentDescription: Optional[str] = Field(
        None,
        description='Permission help text that appears in the admin consent and app assignment experiences.',
    )
    adminConsentDisplayName: Optional[str] = Field(
        None,
        description='Display name for the permission that appears in the admin consent and app assignment experiences.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique scope permission identifier inside the oauth2Permissions collection.',
    )
    isEnabled: Optional[bool] = Field(
        None,
        description='When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed. ',
    )
    type: Optional[str] = Field(
        None,
        description='Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a Company Administrator. Possible values are "User" or "Admin".',
    )
    userConsentDescription: Optional[str] = Field(
        None,
        description='Permission help text that appears in the end user consent experience.',
    )
    userConsentDisplayName: Optional[str] = Field(
        None,
        description='Display name for the permission that appears in the end user consent experience.',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.',
    )


class ConsentType(Enum):
    AllPrincipals = 'AllPrincipals'
    Principal = 'Principal'


class OAuth2PermissionGrant(BaseModel):
    clientId: Optional[str] = Field(
        None,
        description="The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).",
    )
    consentType: Optional[ConsentType] = Field(
        None,
        description='Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.',
    )
    expiryTime: Optional[str] = Field(None, description='Expiry time for TTL')
    objectId: Optional[str] = Field(None, description='The id of the permission grant')
    odata_type: Optional[str] = Field(
        None,
        alias='odata.type',
        description='Microsoft.DirectoryServices.OAuth2PermissionGrant',
    )
    principalId: Optional[str] = Field(
        None,
        description='When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.',
    )
    resourceId: Optional[str] = Field(
        None, description='Object Id of the resource you want to grant'
    )
    scope: Optional[str] = Field(
        None,
        description='Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read',
    )
    startTime: Optional[str] = Field(None, description='Start time for TTL')


class OAuth2PermissionGrantListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='the URL to get the next set of results.',
    )
    value: Optional[List[OAuth2PermissionGrant]] = Field(
        None, description='the list of oauth2 permissions grants'
    )


class OdataError(BaseModel):
    code: Optional[str] = Field(None, description='Error code.')
    message: Optional[ErrorMessage] = None


class OptionalClaim(BaseModel):
    additionalProperties: Optional[Dict[str, Any]] = None
    essential: Optional[bool] = Field(None, description='Is this a required claim.')
    name: Optional[str] = Field(None, description='Claim name.')
    source: Optional[str] = Field(None, description='Claim source.')


class OptionalClaims(BaseModel):
    accessToken: Optional[List[OptionalClaim]] = Field(
        None,
        description='Optional claims requested to be included in the access token.',
    )
    idToken: Optional[List[OptionalClaim]] = Field(
        None, description='Optional claims requested to be included in the id token.'
    )
    samlToken: Optional[List[OptionalClaim]] = Field(
        None, description='Optional claims requested to be included in the saml token.'
    )


class PasswordCredential(BaseModel):
    customKeyIdentifier: Optional[str] = Field(
        None, description='Custom Key Identifier'
    )
    endDate: Optional[datetime] = Field(None, description='End date.')
    keyId: Optional[str] = Field(None, description='Key ID.')
    startDate: Optional[datetime] = Field(None, description='Start date.')
    value: Optional[str] = Field(None, description='Key value.')


class PasswordCredentialListResult(BaseModel):
    value: Optional[List[PasswordCredential]] = Field(
        None, description='A collection of PasswordCredentials.'
    )


class PasswordCredentialsUpdateParameters(BaseModel):
    value: List[PasswordCredential] = Field(
        ..., description='A collection of PasswordCredentials.'
    )


class PasswordProfile(BaseModel):
    forceChangePasswordNextLogin: Optional[bool] = Field(
        None, description='Whether to force a password change on next login.'
    )
    password: str = Field(..., description='Password')


class PreAuthorizedApplicationExtension(BaseModel):
    conditions: Optional[List[str]] = Field(
        None, description="The extension's conditions."
    )


class PreAuthorizedApplicationPermission(BaseModel):
    accessGrants: Optional[List[str]] = Field(
        None, description='The list of permissions.'
    )
    directAccessGrant: Optional[bool] = Field(
        None,
        description='Indicates whether the permission set is DirectAccess or impersonation.',
    )


class ResourceAccess(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier for one of the OAuth2Permission or AppRole instances that the resource application exposes.',
    )
    type: Optional[str] = Field(
        None,
        description='Specifies whether the id property references an OAuth2Permission or an AppRole. Possible values are "scope" or "role".',
    )


class ServicePrincipal(DirectoryObject):
    accountEnabled: Optional[bool] = Field(
        None, description='whether or not the service principal account is enabled'
    )
    alternativeNames: Optional[List[str]] = Field(None, description='alternative names')
    appDisplayName: Optional[str] = Field(
        None, description='The display name exposed by the associated application.'
    )
    appId: Optional[str] = Field(None, description='The application ID.')
    appOwnerTenantId: Optional[str] = None
    appRoleAssignmentRequired: Optional[bool] = Field(
        None,
        description='Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.',
    )
    appRoles: Optional[List[AppRole]] = Field(
        None,
        description='The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the service principal.'
    )
    errorUrl: Optional[str] = Field(
        None,
        description='A URL provided by the author of the associated application to report errors when using the application.',
    )
    homepage: Optional[str] = Field(
        None, description='The URL to the homepage of the associated application.'
    )
    keyCredentials: Optional[List[KeyCredential]] = Field(
        None,
        description='The collection of key credentials associated with the service principal.',
    )
    logoutUrl: Optional[str] = Field(
        None,
        description='A URL provided by the author of the associated application to logout',
    )
    oauth2Permissions: Optional[List[OAuth2Permission]] = Field(
        None,
        description='The OAuth 2.0 permissions exposed by the associated application.',
    )
    passwordCredentials: Optional[List[PasswordCredential]] = Field(
        None,
        description='The collection of password credentials associated with the service principal.',
    )
    preferredTokenSigningKeyThumbprint: Optional[str] = Field(
        None, description='The thumbprint of preferred certificate to sign the token'
    )
    publisherName: Optional[str] = Field(
        None, description="The publisher's name of the associated application"
    )
    replyUrls: Optional[List[str]] = Field(
        None,
        description='The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application.',
    )
    samlMetadataUrl: Optional[str] = Field(
        None, description='The URL to the SAML metadata of the associated application'
    )
    servicePrincipalNames: Optional[List[str]] = Field(
        None, description='A collection of service principal names.'
    )
    servicePrincipalType: Optional[str] = Field(
        None, description='the type of the service principal'
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Optional list of tags that you can apply to your service principals. Not nullable.',
    )


class ServicePrincipalBase(BaseModel):
    accountEnabled: Optional[bool] = Field(
        None, description='whether or not the service principal account is enabled'
    )
    appRoleAssignmentRequired: Optional[bool] = Field(
        None,
        description='Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.',
    )
    keyCredentials: Optional[List[KeyCredential]] = Field(
        None,
        description='The collection of key credentials associated with the service principal.',
    )
    passwordCredentials: Optional[List[PasswordCredential]] = Field(
        None,
        description='The collection of password credentials associated with the service principal.',
    )
    servicePrincipalType: Optional[str] = Field(
        None, description='the type of the service principal'
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Optional list of tags that you can apply to your service principals. Not nullable.',
    )


class ServicePrincipalCreateParameters(ServicePrincipalBase):
    appId: str = Field(..., description='The application ID.')


class ServicePrincipalListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='the URL to get the next set of results.',
    )
    value: Optional[List[ServicePrincipal]] = Field(
        None, description='the list of service principals.'
    )


class ServicePrincipalObjectResult(BaseModel):
    odata_metadata: Optional[str] = Field(
        None, alias='odata.metadata', description='The URL representing edm equivalent.'
    )
    value: Optional[str] = Field(
        None,
        description='The Object ID of the service principal with the specified application ID.',
    )


ServicePrincipalUpdateParameters = ServicePrincipalBase


class SignInName(BaseModel):
    type: Optional[str] = Field(
        None,
        description="A string value that can be used to classify user sign-in types in your directory, such as 'emailAddress' or 'userName'.",
    )
    value: Optional[str] = Field(
        None,
        description="The sign-in used by the local account. Must be unique across the company/tenant. For example, 'johnc@example.com'.",
    )


class UserType(Enum):
    Member = 'Member'
    Guest = 'Guest'


class User(DirectoryObject):
    accountEnabled: Optional[bool] = Field(
        None, description='Whether the account is enabled.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the user.'
    )
    givenName: Optional[str] = Field(None, description='The given name for the user.')
    immutableId: Optional[str] = Field(
        None,
        description="This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.",
    )
    mail: Optional[str] = Field(
        None, description='The primary email address of the user.'
    )
    mailNickname: Optional[str] = Field(
        None, description='The mail alias for the user.'
    )
    signInNames: Optional[List[SignInName]] = Field(
        None, description='The sign-in names of the user.'
    )
    surname: Optional[str] = Field(
        None, description="The user's surname (family name or last name)."
    )
    usageLocation: Optional[str] = Field(
        None,
        description='A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".',
    )
    userPrincipalName: Optional[str] = Field(
        None, description='The principal name of the user.'
    )
    userType: Optional[UserType] = Field(
        None,
        description="A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.",
    )


class UserBase(BaseModel):
    givenName: Optional[str] = Field(None, description='The given name for the user.')
    immutableId: Optional[str] = Field(
        None,
        description="This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.",
    )
    surname: Optional[str] = Field(
        None, description="The user's surname (family name or last name)."
    )
    usageLocation: Optional[str] = Field(
        None,
        description='A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".',
    )
    userType: Optional[UserType] = Field(
        None,
        description="A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.",
    )


class UserCreateParameters(UserBase):
    accountEnabled: bool = Field(..., description='Whether the account is enabled.')
    displayName: str = Field(..., description='The display name of the user.')
    mail: Optional[str] = Field(
        None, description='The primary email address of the user.'
    )
    mailNickname: str = Field(..., description='The mail alias for the user.')
    passwordProfile: PasswordProfile
    userPrincipalName: str = Field(
        ...,
        description='The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.',
    )


class UserGetMemberGroupsParameters(BaseModel):
    securityEnabledOnly: bool = Field(
        ...,
        description='If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.',
    )


class UserGetMemberGroupsResult(BaseModel):
    value: Optional[List[str]] = Field(
        None, description='A collection of group IDs of which the user is a member.'
    )


class UserListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='The URL to get the next set of results.',
    )
    value: Optional[List[User]] = Field(None, description='the list of users.')


class UserUpdateParameters(UserBase):
    accountEnabled: Optional[bool] = Field(
        None, description='Whether the account is enabled.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the user.'
    )
    mail: Optional[str] = Field(
        None, description='The primary email address of the user.'
    )
    mailNickname: Optional[str] = Field(
        None, description='The mail alias for the user.'
    )
    passwordProfile: Optional[PasswordProfile] = None
    userPrincipalName: Optional[str] = Field(
        None,
        description='The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.',
    )


class ADGroup(DirectoryObject):
    displayName: Optional[str] = Field(
        None, description='The display name of the group.'
    )
    mail: Optional[str] = Field(
        None, description='The primary email address of the group.'
    )
    mailEnabled: Optional[bool] = Field(
        None,
        description='Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.',
    )
    mailNickname: Optional[str] = Field(
        None, description='The mail alias for the group. '
    )
    securityEnabled: Optional[bool] = Field(
        None, description='Whether the group is security-enable.'
    )


class AppRoleAssignment(DirectoryObject):
    id: Optional[str] = Field(
        None,
        description='The role id that was assigned to the principal. This role must be declared by the target resource application resourceId in its appRoles property.',
    )
    principalDisplayName: Optional[str] = Field(
        None,
        description='The display name of the principal that was granted the access.',
    )
    principalId: Optional[str] = Field(
        None,
        description='The unique identifier (objectId) for the principal being granted the access.',
    )
    principalType: Optional[str] = Field(
        None,
        description='The type of principal. This can either be "User", "Group" or "ServicePrincipal".',
    )
    resourceDisplayName: Optional[str] = Field(
        None,
        description='The display name of the resource to which the assignment was made.',
    )
    resourceId: Optional[str] = Field(
        None,
        description='The unique identifier (objectId) for the target resource (service principal) for which the assignment was made.',
    )


class AppRoleAssignmentListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='The URL to get the next set of results.',
    )
    value: Optional[List[AppRoleAssignment]] = Field(
        None, description='A collection of AppRoleAssignment.'
    )


class GraphError(BaseModel):
    odata_error: Optional[OdataError] = Field(None, alias='odata.error')


class GroupListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='The URL to get the next set of results.',
    )
    value: Optional[List[ADGroup]] = Field(
        None, description='A collection of Active Directory groups.'
    )


class PreAuthorizedApplication(BaseModel):
    appId: Optional[str] = Field(None, description='Represents the application id.')
    extensions: Optional[List[PreAuthorizedApplicationExtension]] = Field(
        None, description='Collection of extensions from the resource application.'
    )
    permissions: Optional[List[PreAuthorizedApplicationPermission]] = Field(
        None,
        description='Collection of required app permissions/entitlements from the resource application.',
    )


class RequiredResourceAccess(BaseModel):
    resourceAccess: List[ResourceAccess] = Field(
        ...,
        description='The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.',
    )
    resourceAppId: Optional[str] = Field(
        None,
        description='The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.',
    )


class Application(DirectoryObject):
    allowGuestsSignIn: Optional[bool] = Field(
        None,
        description='A property on the application to indicate if the application accepts other IDPs or not or partially accepts.',
    )
    allowPassthroughUsers: Optional[bool] = Field(
        None,
        description='Indicates that the application supports pass through users who have no presence in the resource tenant.',
    )
    appId: Optional[str] = Field(None, description='The application ID.')
    appLogoUrl: Optional[str] = Field(
        None, description='The url for the application logo image stored in a CDN.'
    )
    appPermissions: Optional[List[str]] = Field(
        None, description='The application permissions.'
    )
    appRoles: Optional[List[AppRole]] = Field(
        None,
        description='The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.',
    )
    availableToOtherTenants: Optional[bool] = Field(
        None, description='Whether the application is available to other tenants.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the application.'
    )
    errorUrl: Optional[str] = Field(
        None,
        description='A URL provided by the author of the application to report errors when using the application.',
    )
    groupMembershipClaims: Optional[GroupMembershipClaims] = None
    homepage: Optional[str] = Field(
        None, description='The home page of the application.'
    )
    identifierUris: Optional[List[str]] = Field(
        None, description='A collection of URIs for the application.'
    )
    informationalUrls: Optional[InformationalUrl] = None
    isDeviceOnlyAuthSupported: Optional[bool] = Field(
        None,
        description='Specifies whether this application supports device authentication without a user. The default is false.',
    )
    keyCredentials: Optional[List[KeyCredential]] = Field(
        None, description='A collection of KeyCredential objects.'
    )
    knownClientApplications: Optional[List[str]] = Field(
        None,
        description='Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).',
    )
    logoutUrl: Optional[str] = Field(None, description='the url of the logout page')
    oauth2AllowImplicitFlow: Optional[bool] = Field(
        None, description='Whether to allow implicit grant flow for OAuth2'
    )
    oauth2AllowUrlPathMatching: Optional[bool] = Field(
        None,
        description='Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.',
    )
    oauth2Permissions: Optional[List[OAuth2Permission]] = Field(
        None,
        description='The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.',
    )
    oauth2RequirePostResponse: Optional[bool] = Field(
        None,
        description='Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.',
    )
    optionalClaims: Optional[OptionalClaims] = None
    orgRestrictions: Optional[List[str]] = Field(
        None, description='A list of tenants allowed to access application.'
    )
    passwordCredentials: Optional[List[PasswordCredential]] = Field(
        None, description='A collection of PasswordCredential objects'
    )
    preAuthorizedApplications: Optional[List[PreAuthorizedApplication]] = Field(
        None, description='list of pre-authorized applications.'
    )
    publicClient: Optional[bool] = Field(
        None,
        description='Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.',
    )
    publisherDomain: Optional[str] = Field(
        None,
        description='Reliable domain which can be used to identify an application.',
    )
    replyUrls: Optional[List[str]] = Field(
        None, description='A collection of reply URLs for the application.'
    )
    requiredResourceAccess: Optional[List[RequiredResourceAccess]] = Field(
        None,
        description='Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.',
    )
    samlMetadataUrl: Optional[str] = Field(
        None, description='The URL to the SAML metadata for the application.'
    )
    signInAudience: Optional[str] = Field(
        None,
        description='Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).',
    )
    wwwHomepage: Optional[str] = Field(None, description='The primary Web page.')


class ApplicationBase(BaseModel):
    allowGuestsSignIn: Optional[bool] = Field(
        None,
        description='A property on the application to indicate if the application accepts other IDPs or not or partially accepts.',
    )
    allowPassthroughUsers: Optional[bool] = Field(
        None,
        description='Indicates that the application supports pass through users who have no presence in the resource tenant.',
    )
    appLogoUrl: Optional[str] = Field(
        None, description='The url for the application logo image stored in a CDN.'
    )
    appPermissions: Optional[List[str]] = Field(
        None, description='The application permissions.'
    )
    appRoles: Optional[List[AppRole]] = Field(
        None,
        description='The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.',
    )
    availableToOtherTenants: Optional[bool] = Field(
        None, description='Whether the application is available to other tenants.'
    )
    errorUrl: Optional[str] = Field(
        None,
        description='A URL provided by the author of the application to report errors when using the application.',
    )
    groupMembershipClaims: Optional[GroupMembershipClaims] = None
    homepage: Optional[str] = Field(
        None, description='The home page of the application.'
    )
    informationalUrls: Optional[InformationalUrl] = None
    isDeviceOnlyAuthSupported: Optional[bool] = Field(
        None,
        description='Specifies whether this application supports device authentication without a user. The default is false.',
    )
    keyCredentials: Optional[List[KeyCredential]] = Field(
        None, description='A collection of KeyCredential objects.'
    )
    knownClientApplications: Optional[List[str]] = Field(
        None,
        description='Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).',
    )
    logoutUrl: Optional[str] = Field(None, description='the url of the logout page')
    oauth2AllowImplicitFlow: Optional[bool] = Field(
        None, description='Whether to allow implicit grant flow for OAuth2'
    )
    oauth2AllowUrlPathMatching: Optional[bool] = Field(
        None,
        description='Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.',
    )
    oauth2Permissions: Optional[List[OAuth2Permission]] = Field(
        None,
        description='The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.',
    )
    oauth2RequirePostResponse: Optional[bool] = Field(
        None,
        description='Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.',
    )
    optionalClaims: Optional[OptionalClaims] = None
    orgRestrictions: Optional[List[str]] = Field(
        None, description='A list of tenants allowed to access application.'
    )
    passwordCredentials: Optional[List[PasswordCredential]] = Field(
        None, description='A collection of PasswordCredential objects'
    )
    preAuthorizedApplications: Optional[List[PreAuthorizedApplication]] = Field(
        None, description='list of pre-authorized applications.'
    )
    publicClient: Optional[bool] = Field(
        None,
        description='Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.',
    )
    publisherDomain: Optional[str] = Field(
        None,
        description='Reliable domain which can be used to identify an application.',
    )
    replyUrls: Optional[List[str]] = Field(
        None, description='A collection of reply URLs for the application.'
    )
    requiredResourceAccess: Optional[List[RequiredResourceAccess]] = Field(
        None,
        description='Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.',
    )
    samlMetadataUrl: Optional[str] = Field(
        None, description='The URL to the SAML metadata for the application.'
    )
    signInAudience: Optional[str] = Field(
        None,
        description='Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).',
    )
    wwwHomepage: Optional[str] = Field(None, description='The primary Web page.')


class ApplicationCreateParameters(ApplicationBase):
    displayName: str = Field(..., description='The display name of the application.')
    identifierUris: Optional[List[str]] = Field(
        None, description='A collection of URIs for the application.'
    )


class ApplicationListResult(BaseModel):
    odata_nextLink: Optional[str] = Field(
        None,
        alias='odata.nextLink',
        description='The URL to get the next set of results.',
    )
    value: Optional[List[Application]] = Field(
        None, description='A collection of applications.'
    )


class ApplicationUpdateParameters(ApplicationBase):
    displayName: Optional[str] = Field(
        None, description='The display name of the application.'
    )
    identifierUris: Optional[List[str]] = Field(
        None, description='A collection of URIs for the application.'
    )
