# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:16:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    AddOwnerParameters,
    ADGroup,
    Application,
    ApplicationCreateParameters,
    ApplicationListResult,
    ApplicationUpdateParameters,
    AppRoleAssignmentListResult,
    CheckGroupMembershipParameters,
    CheckGroupMembershipResult,
    DirectoryObjectListResult,
    Domain,
    DomainListResult,
    GetObjectsParameters,
    GraphError,
    GroupAddMemberParameters,
    GroupCreateParameters,
    GroupGetMemberGroupsParameters,
    GroupGetMemberGroupsResult,
    GroupListResult,
    KeyCredentialListResult,
    KeyCredentialsUpdateParameters,
    OAuth2PermissionGrant,
    OAuth2PermissionGrantListResult,
    PasswordCredentialListResult,
    PasswordCredentialsUpdateParameters,
    ServicePrincipal,
    ServicePrincipalCreateParameters,
    ServicePrincipalListResult,
    ServicePrincipalObjectResult,
    ServicePrincipalUpdateParameters,
    User,
    UserCreateParameters,
    UserGetMemberGroupsParameters,
    UserGetMemberGroupsResult,
    UserListResult,
    UserUpdateParameters,
)

app = MCPProxy(
    description='The Graph RBAC Management Client',
    title='GraphRbacManagementClient',
    version='1.6',
    servers=[{'url': 'https://graph.windows.net'}],
)


@app.get(
    '/{tenantID}/applications',
    description=""" Lists applications by filter parameters. """,
    tags=['domain_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/applications',
    description=""" Create a new application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__create(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: ApplicationCreateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/applications/{applicationObjectId}',
    description=""" Delete an application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__delete(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/applications/{applicationObjectId}',
    description=""" Get an application by object ID. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__get(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/applications/{applicationObjectId}',
    description=""" Update an existing application. """,
    tags=['application_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__patch(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: ApplicationUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/applications/{applicationObjectId}/$links/owners',
    description=""" Add an owner to an application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__add_owner(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: AddOwnerParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/applications/{applicationObjectId}/$links/owners/{ownerObjectId}',
    description=""" Remove a member from owners. """,
    tags=[
        'application_object_management',
        'authenticated_user_data_access',
        'application_service_principal_association',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__remove_owner(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    owner_object_id: str = Path(..., alias='ownerObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/applications/{applicationObjectId}/keyCredentials',
    description=""" Get the keyCredentials associated with an application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__list_key_credentials(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/applications/{applicationObjectId}/keyCredentials',
    description=""" Update the keyCredentials associated with an application. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__update_key_credentials(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: KeyCredentialsUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/applications/{applicationObjectId}/owners',
    description=""" The owners are a set of non-admin users who are allowed to modify this object. """,
    tags=['application_object_management', 'authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__list_owners(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    """
    Directory objects that are owners of the application.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/applications/{applicationObjectId}/passwordCredentials',
    description=""" Get the passwordCredentials associated with an application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__list_password_credentials(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/applications/{applicationObjectId}/passwordCredentials',
    description=""" Update passwordCredentials associated with an application. """,
    tags=[
        'application_object_management',
        'user_account_management',
        'service_principal_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__update_password_credentials(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: PasswordCredentialsUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/deletedApplications',
    description=""" Gets a list of deleted applications in the directory. """,
    tags=[
        'application_object_management',
        'service_principal_operations',
        'authenticated_user_data_access',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def deleted_applications__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/deletedApplications/{applicationObjectId}',
    description=""" Hard-delete an application. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def deleted_applications__hard_delete(
    application_object_id: str = Path(..., alias='applicationObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/deletedApplications/{objectId}/restore',
    description=""" Restores the deleted application in the directory. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def deleted_applications__restore(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/domains',
    description=""" Gets a list of domains for the current tenant. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def domains__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/domains/{domainName}',
    description=""" Gets a specific domain in the current tenant. """,
    tags=['domain_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def domains__get(
    domain_name: str = Path(..., alias='domainName'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/getObjectsByObjectIds',
    description=""" Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter. """,
    tags=['application_object_management', 'user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def objects__get_objects_by_object_ids(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: GetObjectsParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/groups',
    description=""" Gets list of groups for the current tenant. """,
    tags=['authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/groups',
    description=""" Create a group in the directory. """,
    tags=['group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__create(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: GroupCreateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/groups/{groupObjectId}/$links/members',
    description=""" Add a member to a group. """,
    tags=['group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__add_member(
    group_object_id: str = Path(..., alias='groupObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: GroupAddMemberParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}',
    description=""" Remove a member from a group. """,
    tags=['group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__remove_member(
    group_object_id: str = Path(..., alias='groupObjectId'),
    member_object_id: str = Path(..., alias='memberObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/groups/{objectId}',
    description=""" Delete a group from the directory. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__delete(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/groups/{objectId}',
    description=""" Gets group information from the directory. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__get(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/groups/{objectId}/$links/owners',
    description=""" Add an owner to a group. """,
    tags=['application_object_management', 'group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__add_owner(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: AddOwnerParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/groups/{objectId}/$links/owners/{ownerObjectId}',
    description=""" Remove a member from owners. """,
    tags=['application_object_management', 'user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__remove_owner(
    object_id: str = Path(..., alias='objectId'),
    owner_object_id: str = Path(..., alias='ownerObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/groups/{objectId}/getMemberGroups',
    description=""" Gets a collection of object IDs of groups of which the specified group is a member. """,
    tags=['group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__get_member_groups(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: GroupGetMemberGroupsParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/groups/{objectId}/members',
    description=""" Gets the members of a group. """,
    tags=['application_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__get_group_members(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/groups/{objectId}/owners',
    description=""" The owners are a set of non-admin users who are allowed to modify this object. """,
    tags=['group_object_management', 'authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__list_owners(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    """
    Directory objects that are owners of the group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/isMemberOf',
    description=""" Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group. """,
    tags=['group_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def groups__is_member_of(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: CheckGroupMembershipParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/me',
    description=""" Gets the details for the currently logged-in user. """,
    tags=['domain_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def signed_in_user__get(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/me/ownedObjects',
    description=""" Get the list of directory objects that are owned by the user. """,
    tags=[
        'application_object_management',
        'domain_object_management',
        'user_account_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def signed_in_user__list_owned_objects(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/oauth2PermissionGrants',
    description=""" Queries OAuth2 permissions grants for the relevant SP ObjectId of an app. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def o_auth2_permission_grant__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/oauth2PermissionGrants',
    description=""" Grants OAuth2 permissions for the relevant resource Ids of an app. """,
    tags=['o_auth2_permission_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def o_auth2_permission_grant__create(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: OAuth2PermissionGrant = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/oauth2PermissionGrants/{objectId}',
    description=""" Delete a OAuth2 permission grant for the relevant resource Ids of an app. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def o_auth2_permission_grant__delete(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals',
    description=""" Gets a list of service principals from the current tenant. """,
    tags=['service_principal_operations', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/servicePrincipals',
    description=""" Creates a service principal in the directory. """,
    tags=['service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__create(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: ServicePrincipalCreateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/servicePrincipals/{objectId}',
    description=""" Deletes a service principal from the directory. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__delete(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}',
    description=""" Gets service principal information from the directory. Query by objectId or pass a filter to query by appId """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__get(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/servicePrincipals/{objectId}',
    description=""" Updates a service principal in the directory. """,
    tags=['service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__update(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: ServicePrincipalUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/servicePrincipals/{objectId}/$links/owners',
    description=""" Add an owner to a service principal. """,
    tags=['application_object_management', 'user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__add_owner(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: AddOwnerParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/servicePrincipals/{objectId}/$links/owners/{ownerObjectId}',
    description=""" Remove a member from owners. """,
    tags=['application_object_management', 'authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__remove_owner(
    object_id: str = Path(..., alias='objectId'),
    owner_object_id: str = Path(..., alias='ownerObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}/appRoleAssignedTo',
    tags=['service_principal_operations', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list_app_role_assigned_to(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    """
    Principals (users, groups, and service principals) that are assigned to this service principal.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}/appRoleAssignments',
    tags=['service_principal_operations', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list_app_role_assignments(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    """
    Applications that the service principal is assigned to.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}/keyCredentials',
    description=""" Get the keyCredentials associated with the specified service principal. """,
    tags=['application_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list_key_credentials(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/servicePrincipals/{objectId}/keyCredentials',
    description=""" Update the keyCredentials associated with a service principal. """,
    tags=['service_principal_operations', 'application_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__update_key_credentials(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: KeyCredentialsUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}/owners',
    description=""" The owners are a set of non-admin users who are allowed to modify this object. """,
    tags=['service_principal_operations', 'application_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list_owners(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    """
    Directory objects that are owners of this service principal.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipals/{objectId}/passwordCredentials',
    description=""" Gets the passwordCredentials associated with a service principal. """,
    tags=['application_object_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__list_password_credentials(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/servicePrincipals/{objectId}/passwordCredentials',
    description=""" Updates the passwordCredentials associated with a service principal. """,
    tags=['user_account_management', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def service_principals__update_password_credentials(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: PasswordCredentialsUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/servicePrincipalsByAppId/{applicationID}/objectId',
    description=""" Gets an object id for a given application id from the current tenant. """,
    tags=['application_object_management', 'application_service_principal_association'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def applications__get_service_principals_id_by_app_id(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    application_i_d: str = Path(..., alias='applicationID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/users',
    description=""" Gets list of users for the current tenant. """,
    tags=['authenticated_user_data_access', 'service_principal_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__list(
    field_filter: Optional[str] = Query(None, alias='$filter'),
    field_expand: Optional[str] = Query(None, alias='$expand'),
    field_top: Optional[conint(ge=1, le=999)] = Query(100, alias='$top'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/users',
    description=""" Create a new user. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__create(
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: UserCreateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{tenantID}/users/{objectId}/getMemberGroups',
    description=""" Gets a collection that contains the object IDs of the groups of which the user is a member. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__get_member_groups(
    object_id: str = Path(..., alias='objectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: UserGetMemberGroupsParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{tenantID}/users/{upnOrObjectId}',
    description=""" Delete a user. """,
    tags=['user_account_management', 'authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__delete(
    upn_or_object_id: str = Path(..., alias='upnOrObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{tenantID}/users/{upnOrObjectId}',
    description=""" Gets user information from the directory. """,
    tags=['user_account_management', 'authenticated_user_data_access'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__get(
    upn_or_object_id: str = Path(..., alias='upnOrObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/{tenantID}/users/{upnOrObjectId}',
    description=""" Updates a user. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users__update(
    upn_or_object_id: str = Path(..., alias='upnOrObjectId'),
    api_version: str = Query(..., alias='api-version'),
    tenant_i_d: str = Path(..., alias='tenantID'),
    body: UserUpdateParameters = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
